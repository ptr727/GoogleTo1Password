variables:
  # $(BuildConfiguration) must be set in the pipeline variables
  GitHubConnection: 'github.com_ptr727'

pool:
  vmImage: windows-2019

steps:

# Install DotNet Core 2.x
# Required by GitVersion tool
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops
- task: UseDotNet@2
  displayName: 'Install DotNet Core 2.x'
  inputs:
    packageType: runtime
    version: 2.x

# Install DotNet Core SDK 3.1.x
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops
- task: UseDotNet@2
  displayName: 'Install DotNet Core SDK 3.1.x'
  inputs:
    packageType: sdk
    version: 3.1.x

# Run GitVersion Tool
# https://gitversion.net/docs/build-server-support/build-server/azure-devops
- task: GitVersion@5
  displayName: 'Run GitVersion Tool'
  inputs:
    runtime: core
    configFilePath: gitversion.yml

# Set Manifest Version Information
# Modify the csproj file directly and use values calculated by the GitVersion tool
# https://github.com/BMuuN/vsts-assemblyinfo-task/wiki/Attributes
- task: Assembly-Info-NetCore@2
  displayName: 'Set Manifest Version Information'
  inputs:
    FileNames: '**/*.csproj'
    VersionNumber: $(GitVersion.AssemblySemVer)
    FileVersionNumber: $(GitVersion.AssemblySemFileVer)
    InformationalVersion: $(GitVersion.InformationalVersion)
    PackageVersion: $(GitVersion.InformationalVersion)

# DotNetCore Publish
- task: DotNetCoreCLI@2
  displayName: 'DotNetCore Publish'
  inputs:
    command: publish
    projects: '**/*.csproj'
    #configuration: $(BuildConfiguration)
    #configuration is ignored, use commandline instead
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    publishWebProjects: false
    modifyOutputPath: true
    zipAfterPublish: false

# 7-Zip Build Output
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/archive-files?view=azure-devops
- task: ArchiveFiles@2
  displayName: '7-Zip Build Output'
  inputs:
    rootFolderOrFile: $(Build.ArtifactStagingDirectory)
    includeRootFolder: false
    archiveType: 7z
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.Repository.Name).7z'
    replaceExistingArchive: true

# Release to GitHub
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/github-release?view=azure-devops
- task: GitHubRelease@1
  displayName: 'Release to GitHub'
  # Do not tag any pre-release builds else GitVersion will fail
  # https://github.com/GitTools/GitVersion/issues/2211
  #condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/develop'))
  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    gitHubConnection: $(GitHubConnection)
    repositoryName: $(Build.Repository.Name)
    action: create
    target: $(Build.SourceVersion)
    tagSource: userSpecifiedTag
    tag: $(GitVersion.NuGetVersion)
    title: $(GitVersion.NuGetVersion)
    assets: '$(Build.ArtifactStagingDirectory)/$(Build.Repository.Name).7z'
    isPreRelease: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}
